/*
 * ex: set ro:
 * DO NOT EDIT.
 * generated by smc (http://smc.sourceforge.net/)
 * from file : fsm.sm
 */

#ifndef _FSM_SM_H
#define _FSM_SM_H

#include <assert.h>
#include "statemap.h"

#define NO_FSM_SM_MACRO
struct door;
struct fsmContext;

struct doorState {
    void(*Entry)(struct fsmContext *const fsm);
    void(*Exit)(struct fsmContext *const fsm);
    void(*condition_to_close)(struct fsmContext *const fsm);
    void(*condition_to_open)(struct fsmContext *const fsm);
    void(*Default)(struct fsmContext *const fsm);
    STATE_MEMBERS
};


extern const struct doorState MainMap_open;
extern const struct doorState MainMap_close;

struct fsmContext {
    struct door *_owner;
    FSM_MEMBERS(door)
};

int door_enter_act_push(struct door *ctxt);

int door_exit_act_push(struct door *ctxt);
int door_entry_act_put(struct door *ctxt);
int door_exit_act_put(struct door *ctxt);

#ifdef NO_FSM_SM_MACRO
extern void fsmContext_Init(struct fsmContext *const fsm, struct door *const owner);
extern void fsmContext_EnterStartState(struct fsmContext *const fsm);
extern void fsmContext_condition_to_close(struct fsmContext *const fsm);
extern void fsmContext_condition_to_open(struct fsmContext *const fsm);
#else
#define fsmContext_Init(fsm, owner) \
    FSM_INIT((fsm), &MainMap_open); \
    (fsm)->_owner = (owner)

#define fsmContext_EnterStartState(fsm) \
    ENTRY_STATE(getState(fsm))

#define fsmContext_condition_to_close(fsm) \
    assert(getState(fsm) != NULL); \
    setTransition((fsm), "condition_to_close"); \
    getState(fsm)->condition_to_close((fsm)); \
    setTransition((fsm), NULL)

#define fsmContext_condition_to_open(fsm) \
    assert(getState(fsm) != NULL); \
    setTransition((fsm), "condition_to_open"); \
    getState(fsm)->condition_to_open((fsm)); \
    setTransition((fsm), NULL)
#endif

#endif

/*
 * Local variables:
 *  buffer-read-only: t
 * End:
 */
